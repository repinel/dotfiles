# default editor
export EDITOR=/usr/local/bin/nvim

# Stop the git merge audoedit nagging
export GIT_MERGE_AUTOEDIT=no

export GPG_TTY=$(tty)
# Add the following to your shell init to set up gpg-agent automatically for every shell
if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
  source ~/.gnupg/.gpg-agent-info
  export GPG_AGENT_INFO
else
  eval $(gpg-agent --daemon --write-env-file ~/.gnupg/.gpg-agent-info)
fi

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
#export PATH="$PATH:$HOME/.rvm/bin"
#[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Mainly for SSH
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

#export GOPATH=~/go

# Python
#if command -v pyenv 1>/dev/null 2>&1; then
#  eval "$(pyenv init -)"
#fi
#export WORKON_HOME=~/.virtualenvs
#export PYENV_VIRTUALENV_DISABLE_PROMPT=1
#export PYENV_VIRTUALENV_VERBOSE_ACTIVATE=1
#eval "$(pyenv virtualenv-init -)"

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_DEFAULT_COMMAND="rg --files"

# TODO: AWS CLI auto complete
#autoload bashcompinit && bashcompinit
#complete -C ~/.pyenv/shims/aws_completer aws

# Node.js

#export NVM_DIR="$HOME/.nvm"
#[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
#[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
#
#autoload -U add-zsh-hook
#load-nvmrc() {
#  local node_version="$(nvm version)"
#  local nvmrc_path="$(nvm_find_nvmrc)"
#
#  if [ -n "$nvmrc_path" ]; then
#    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")
#
#    if [ "$nvmrc_node_version" = "N/A" ]; then
#      nvm install
#    elif [ "$nvmrc_node_version" != "$node_version" ]; then
#      nvm use
#    fi
#  elif [ "$node_version" != "$(nvm version default)" ]; then
#    echo "Reverting to nvm default version"
#    nvm use default
#  fi
#}
#add-zsh-hook chpwd load-nvmrc
#load-nvmrc

# PDF utils
pdfcompress() {
  gs -q -dNOPAUSE -dBATCH -dSAFER -sDEVICE=pdfwrite -dCompatibilityLevel=1.3 \
    -dPDFSETTINGS=/screen -dEmbedAllFonts=true -dSubsetFonts=true \
    -dColorImageDownsampleType=/Bicubic -dColorImageResolution=144 \
    -dGrayImageDownsampleType=/Bicubic -dGrayImageResolution=144 \
    -dMonoImageDownsampleType=/Bicubic -dMonoImageResolution=144 -sOutputFile=$1.compressed.pdf $1
}

prompt_context() {} # Remove username from PS1

# Enable history search with Ctrl+R
bindkey -v
bindkey "^R" history-incremental-search-backward

[[ -s "$HOME/.shell_aliases" ]] && source "$HOME/.shell_aliases"
[[ -d "$HOME/bin" ]] && export PATH=~/bin:$PATH

#set -o vi # Shell Vi mode
